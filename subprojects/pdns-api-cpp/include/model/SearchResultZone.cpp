/**
 * PowerDNS Authoritative HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.13
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SearchResultZone.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




SearchResultZone::SearchResultZone()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Object_type = utility::conversions::to_string_t("");
    m_Object_typeIsSet = false;
    m_Zone_id = utility::conversions::to_string_t("");
    m_Zone_idIsSet = false;
}

SearchResultZone::~SearchResultZone()
{
}

void SearchResultZone::validate()
{
    // TODO: implement validation
}

web::json::value SearchResultZone::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_Object_typeIsSet)
    {
        val[utility::conversions::to_string_t("object_type")] = ModelBase::toJson(m_Object_type);
    }
    if(m_Zone_idIsSet)
    {
        val[utility::conversions::to_string_t("zone_id")] = ModelBase::toJson(m_Zone_id);
    }

    return val;
}

void SearchResultZone::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            setName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("object_type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("object_type"));
        if(!fieldValue.is_null())
        {
            setObjectType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("zone_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("zone_id"));
        if(!fieldValue.is_null())
        {
            setZoneId(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void SearchResultZone::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_Object_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("object_type"), m_Object_type));
    }
    if(m_Zone_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("zone_id"), m_Zone_id));
    }
}

void SearchResultZone::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("object_type")))
    {
        setObjectType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("object_type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("zone_id")))
    {
        setZoneId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("zone_id"))));
    }
}

utility::string_t SearchResultZone::getName() const
{
    return m_Name;
}

void SearchResultZone::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool SearchResultZone::nameIsSet() const
{
    return m_NameIsSet;
}

void SearchResultZone::unsetName()
{
    m_NameIsSet = false;
}

utility::string_t SearchResultZone::getObjectType() const
{
    return m_Object_type;
}

void SearchResultZone::setObjectType(const utility::string_t& value)
{
    m_Object_type = value;
    m_Object_typeIsSet = true;
}

bool SearchResultZone::objectTypeIsSet() const
{
    return m_Object_typeIsSet;
}

void SearchResultZone::unsetObject_type()
{
    m_Object_typeIsSet = false;
}

utility::string_t SearchResultZone::getZoneId() const
{
    return m_Zone_id;
}

void SearchResultZone::setZoneId(const utility::string_t& value)
{
    m_Zone_id = value;
    m_Zone_idIsSet = true;
}

bool SearchResultZone::zoneIdIsSet() const
{
    return m_Zone_idIsSet;
}

void SearchResultZone::unsetZone_id()
{
    m_Zone_idIsSet = false;
}

}
}
}
}


