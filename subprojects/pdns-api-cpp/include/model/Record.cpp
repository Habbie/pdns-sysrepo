/**
 * PowerDNS Authoritative HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.13
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Record.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Record::Record()
{
    m_Content = utility::conversions::to_string_t("");
    m_Disabled = false;
    m_DisabledIsSet = false;
    m_Set_ptr = false;
    m_Set_ptrIsSet = false;
}

Record::~Record()
{
}

void Record::validate()
{
    // TODO: implement validation
}

web::json::value Record::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("content")] = ModelBase::toJson(m_Content);
    if(m_DisabledIsSet)
    {
        val[utility::conversions::to_string_t("disabled")] = ModelBase::toJson(m_Disabled);
    }
    if(m_Set_ptrIsSet)
    {
        val[utility::conversions::to_string_t("set-ptr")] = ModelBase::toJson(m_Set_ptr);
    }

    return val;
}

void Record::fromJson(const web::json::value& val)
{
    setContent(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("content"))));
    if(val.has_field(utility::conversions::to_string_t("disabled")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("disabled"));
        if(!fieldValue.is_null())
        {
            setDisabled(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("set-ptr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("set-ptr"));
        if(!fieldValue.is_null())
        {
            setSetPtr(ModelBase::boolFromJson(fieldValue));
        }
    }
}

void Record::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("content"), m_Content));
    if(m_DisabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("disabled"), m_Disabled));
    }
    if(m_Set_ptrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("set-ptr"), m_Set_ptr));
    }
}

void Record::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setContent(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("content"))));
    if(multipart->hasContent(utility::conversions::to_string_t("disabled")))
    {
        setDisabled(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("disabled"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("set-ptr")))
    {
        setSetPtr(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("set-ptr"))));
    }
}

utility::string_t Record::getContent() const
{
    return m_Content;
}

void Record::setContent(const utility::string_t& value)
{
    m_Content = value;
    
}

bool Record::isDisabled() const
{
    return m_Disabled;
}

void Record::setDisabled(bool value)
{
    m_Disabled = value;
    m_DisabledIsSet = true;
}

bool Record::disabledIsSet() const
{
    return m_DisabledIsSet;
}

void Record::unsetDisabled()
{
    m_DisabledIsSet = false;
}

bool Record::isSetPtr() const
{
    return m_Set_ptr;
}

void Record::setSetPtr(bool value)
{
    m_Set_ptr = value;
    m_Set_ptrIsSet = true;
}

bool Record::setPtrIsSet() const
{
    return m_Set_ptrIsSet;
}

void Record::unsetSet_ptr()
{
    m_Set_ptrIsSet = false;
}

}
}
}
}


