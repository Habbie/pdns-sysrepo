/**
 * PowerDNS Authoritative HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.13
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Cryptokey.h
 *
 * Describes a DNSSEC cryptographic key
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Cryptokey_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Cryptokey_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Describes a DNSSEC cryptographic key
/// </summary>
class  Cryptokey
    : public ModelBase
{
public:
    Cryptokey();
    virtual ~Cryptokey();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Cryptokey members

    /// <summary>
    /// set to \&quot;Cryptokey\&quot;
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);

    /// <summary>
    /// The internal identifier, read only
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getKeytype() const;
    bool keytypeIsSet() const;
    void unsetKeytype();

    void setKeytype(const utility::string_t& value);

    /// <summary>
    /// Whether or not the key is in active use
    /// </summary>
    bool isActive() const;
    bool activeIsSet() const;
    void unsetActive();

    void setActive(bool value);

    /// <summary>
    /// The DNSKEY record for this key
    /// </summary>
    utility::string_t getDnskey() const;
    bool dnskeyIsSet() const;
    void unsetDnskey();

    void setDnskey(const utility::string_t& value);

    /// <summary>
    /// An array of DS records for this key
    /// </summary>
    std::vector<utility::string_t>& getDs();
    bool dsIsSet() const;
    void unsetDs();

    void setDs(const std::vector<utility::string_t>& value);

    /// <summary>
    /// The private key in ISC format
    /// </summary>
    utility::string_t getPrivatekey() const;
    bool privatekeyIsSet() const;
    void unsetPrivatekey();

    void setPrivatekey(const utility::string_t& value);

    /// <summary>
    /// The name of the algorithm of the key, should be a mnemonic
    /// </summary>
    utility::string_t getAlgorithm() const;
    bool algorithmIsSet() const;
    void unsetAlgorithm();

    void setAlgorithm(const utility::string_t& value);

    /// <summary>
    /// The size of the key
    /// </summary>
    int32_t getBits() const;
    bool bitsIsSet() const;
    void unsetBits();

    void setBits(int32_t value);


protected:
    utility::string_t m_Type;
    bool m_TypeIsSet;
    int32_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Keytype;
    bool m_KeytypeIsSet;
    bool m_Active;
    bool m_ActiveIsSet;
    utility::string_t m_Dnskey;
    bool m_DnskeyIsSet;
    std::vector<utility::string_t> m_Ds;
    bool m_DsIsSet;
    utility::string_t m_Privatekey;
    bool m_PrivatekeyIsSet;
    utility::string_t m_Algorithm;
    bool m_AlgorithmIsSet;
    int32_t m_Bits;
    bool m_BitsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Cryptokey_H_ */
