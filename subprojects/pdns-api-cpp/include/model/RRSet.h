/**
 * PowerDNS Authoritative HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.13
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RRSet.h
 *
 * This represents a Resource Record Set (all records with the same name and type).
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_RRSet_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_RRSet_H_


#include "../ModelBase.h"

#include "Comment.h"
#include <cpprest/details/basic_types.h>
#include "Record.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// This represents a Resource Record Set (all records with the same name and type).
/// </summary>
class  RRSet
    : public ModelBase
{
public:
    RRSet();
    virtual ~RRSet();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// RRSet members

    /// <summary>
    /// Name for record set (e.g. “www.powerdns.com.”)
    /// </summary>
    utility::string_t getName() const;
    
    void setName(const utility::string_t& value);

    /// <summary>
    /// Type of this record (e.g. “A”, “PTR”, “MX”)
    /// </summary>
    utility::string_t getType() const;
    
    void setType(const utility::string_t& value);

    /// <summary>
    /// DNS TTL of the records, in seconds. MUST NOT be included when changetype is set to “DELETE”.
    /// </summary>
    int32_t getTtl() const;
    
    void setTtl(int32_t value);

    /// <summary>
    /// MUST be added when updating the RRSet. Must be REPLACE or DELETE. With DELETE, all existing RRs matching name and type will be deleted, including all comments. With REPLACE: when records is present, all existing RRs matching name and type will be deleted, and then new records given in records will be created. If no records are left, any existing comments will be deleted as well. When comments is present, all existing comments for the RRs matching name and type will be deleted, and then new comments given in comments will be created.
    /// </summary>
    utility::string_t getChangetype() const;
    
    void setChangetype(const utility::string_t& value);

    /// <summary>
    /// All records in this RRSet. When updating Records, this is the list of new records (replacing the old ones). Must be empty when changetype is set to DELETE. An empty list results in deletion of all records (and comments).
    /// </summary>
    std::vector<std::shared_ptr<Record>>& getRecords();
    
    void setRecords(const std::vector<std::shared_ptr<Record>>& value);

    /// <summary>
    /// List of Comment. Must be empty when changetype is set to DELETE. An empty list results in deletion of all comments. modified_at is optional and defaults to the current server time.
    /// </summary>
    std::vector<std::shared_ptr<Comment>>& getComments();
    bool commentsIsSet() const;
    void unsetComments();

    void setComments(const std::vector<std::shared_ptr<Comment>>& value);


protected:
    utility::string_t m_Name;
        utility::string_t m_Type;
        int32_t m_Ttl;
        utility::string_t m_Changetype;
        std::vector<std::shared_ptr<Record>> m_Records;
        std::vector<std::shared_ptr<Comment>> m_Comments;
    bool m_CommentsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_RRSet_H_ */
