/**
 * PowerDNS Authoritative HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.13
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Comment.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Comment::Comment()
{
    m_Content = utility::conversions::to_string_t("");
    m_ContentIsSet = false;
    m_Account = utility::conversions::to_string_t("");
    m_AccountIsSet = false;
    m_Modified_at = 0;
    m_Modified_atIsSet = false;
}

Comment::~Comment()
{
}

void Comment::validate()
{
    // TODO: implement validation
}

web::json::value Comment::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ContentIsSet)
    {
        val[utility::conversions::to_string_t("content")] = ModelBase::toJson(m_Content);
    }
    if(m_AccountIsSet)
    {
        val[utility::conversions::to_string_t("account")] = ModelBase::toJson(m_Account);
    }
    if(m_Modified_atIsSet)
    {
        val[utility::conversions::to_string_t("modified_at")] = ModelBase::toJson(m_Modified_at);
    }

    return val;
}

void Comment::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("content")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("content"));
        if(!fieldValue.is_null())
        {
            setContent(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("account")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("account"));
        if(!fieldValue.is_null())
        {
            setAccount(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("modified_at")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("modified_at"));
        if(!fieldValue.is_null())
        {
            setModifiedAt(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void Comment::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ContentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("content"), m_Content));
    }
    if(m_AccountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("account"), m_Account));
    }
    if(m_Modified_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("modified_at"), m_Modified_at));
    }
}

void Comment::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("content")))
    {
        setContent(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("content"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("account")))
    {
        setAccount(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("account"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("modified_at")))
    {
        setModifiedAt(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("modified_at"))));
    }
}

utility::string_t Comment::getContent() const
{
    return m_Content;
}

void Comment::setContent(const utility::string_t& value)
{
    m_Content = value;
    m_ContentIsSet = true;
}

bool Comment::contentIsSet() const
{
    return m_ContentIsSet;
}

void Comment::unsetContent()
{
    m_ContentIsSet = false;
}

utility::string_t Comment::getAccount() const
{
    return m_Account;
}

void Comment::setAccount(const utility::string_t& value)
{
    m_Account = value;
    m_AccountIsSet = true;
}

bool Comment::accountIsSet() const
{
    return m_AccountIsSet;
}

void Comment::unsetAccount()
{
    m_AccountIsSet = false;
}

int32_t Comment::getModifiedAt() const
{
    return m_Modified_at;
}

void Comment::setModifiedAt(int32_t value)
{
    m_Modified_at = value;
    m_Modified_atIsSet = true;
}

bool Comment::modifiedAtIsSet() const
{
    return m_Modified_atIsSet;
}

void Comment::unsetModified_at()
{
    m_Modified_atIsSet = false;
}

}
}
}
}


