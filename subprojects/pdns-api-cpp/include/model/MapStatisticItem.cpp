/**
 * PowerDNS Authoritative HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.13
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MapStatisticItem.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




MapStatisticItem::MapStatisticItem()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_ValueIsSet = false;
}

MapStatisticItem::~MapStatisticItem()
{
}

void MapStatisticItem::validate()
{
    // TODO: implement validation
}

web::json::value MapStatisticItem::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Value )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("value")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void MapStatisticItem::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            setName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            setType(ModelBase::stringFromJson(fieldValue));
        }
    }
    {
        m_Value.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("value")))
        {
        for( auto& item : val.at(utility::conversions::to_string_t("value")).as_array() )
        {
            if(item.is_null())
            {
                m_Value.push_back( std::shared_ptr<SimpleStatisticItem>(nullptr) );
            }
            else
            {
                std::shared_ptr<SimpleStatisticItem> newItem(new SimpleStatisticItem());
                newItem->fromJson(item);
                m_Value.push_back( newItem );
            }
        }
        }
    }
}

void MapStatisticItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Value )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("value"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void MapStatisticItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    }
    {
        m_Value.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("value")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("value"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Value.push_back( std::shared_ptr<SimpleStatisticItem>(nullptr) );
            }
            else
            {
                std::shared_ptr<SimpleStatisticItem> newItem(new SimpleStatisticItem());
                newItem->fromJson(item);
                m_Value.push_back( newItem );
            }
        }
        }
    }
}

utility::string_t MapStatisticItem::getName() const
{
    return m_Name;
}

void MapStatisticItem::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool MapStatisticItem::nameIsSet() const
{
    return m_NameIsSet;
}

void MapStatisticItem::unsetName()
{
    m_NameIsSet = false;
}

utility::string_t MapStatisticItem::getType() const
{
    return m_Type;
}

void MapStatisticItem::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool MapStatisticItem::typeIsSet() const
{
    return m_TypeIsSet;
}

void MapStatisticItem::unsetType()
{
    m_TypeIsSet = false;
}

std::vector<std::shared_ptr<SimpleStatisticItem>>& MapStatisticItem::getValue()
{
    return m_Value;
}

void MapStatisticItem::setValue(const std::vector<std::shared_ptr<SimpleStatisticItem>>& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool MapStatisticItem::valueIsSet() const
{
    return m_ValueIsSet;
}

void MapStatisticItem::unsetValue()
{
    m_ValueIsSet = false;
}

}
}
}
}


