/**
 * PowerDNS Authoritative HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.13
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Metadata.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Metadata::Metadata()
{
    m_Kind = utility::conversions::to_string_t("");
    m_KindIsSet = false;
    m_MetadataIsSet = false;
}

Metadata::~Metadata()
{
}

void Metadata::validate()
{
    // TODO: implement validation
}

web::json::value Metadata::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_KindIsSet)
    {
        val[utility::conversions::to_string_t("kind")] = ModelBase::toJson(m_Kind);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Metadata )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("metadata")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void Metadata::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("kind")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("kind"));
        if(!fieldValue.is_null())
        {
            setKind(ModelBase::stringFromJson(fieldValue));
        }
    }
    {
        m_Metadata.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("metadata")))
        {
        for( auto& item : val.at(utility::conversions::to_string_t("metadata")).as_array() )
        {
            m_Metadata.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
}

void Metadata::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_KindIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("kind"), m_Kind));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Metadata )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("metadata"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void Metadata::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("kind")))
    {
        setKind(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("kind"))));
    }
    {
        m_Metadata.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("metadata")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("metadata"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Metadata.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
}

utility::string_t Metadata::getKind() const
{
    return m_Kind;
}

void Metadata::setKind(const utility::string_t& value)
{
    m_Kind = value;
    m_KindIsSet = true;
}

bool Metadata::kindIsSet() const
{
    return m_KindIsSet;
}

void Metadata::unsetKind()
{
    m_KindIsSet = false;
}

std::vector<utility::string_t>& Metadata::getMetadata()
{
    return m_Metadata;
}

void Metadata::setMetadata(const std::vector<utility::string_t>& value)
{
    m_Metadata = value;
    m_MetadataIsSet = true;
}

bool Metadata::metadataIsSet() const
{
    return m_MetadataIsSet;
}

void Metadata::unsetMetadata()
{
    m_MetadataIsSet = false;
}

}
}
}
}


