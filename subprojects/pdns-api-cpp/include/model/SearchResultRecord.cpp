/**
 * PowerDNS Authoritative HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.13
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SearchResultRecord.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




SearchResultRecord::SearchResultRecord()
{
    m_Content = utility::conversions::to_string_t("");
    m_ContentIsSet = false;
    m_Disabled = false;
    m_DisabledIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Object_type = utility::conversions::to_string_t("");
    m_Object_typeIsSet = false;
    m_Zone_id = utility::conversions::to_string_t("");
    m_Zone_idIsSet = false;
    m_Zone = utility::conversions::to_string_t("");
    m_ZoneIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Ttl = 0;
    m_TtlIsSet = false;
}

SearchResultRecord::~SearchResultRecord()
{
}

void SearchResultRecord::validate()
{
    // TODO: implement validation
}

web::json::value SearchResultRecord::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ContentIsSet)
    {
        val[utility::conversions::to_string_t("content")] = ModelBase::toJson(m_Content);
    }
    if(m_DisabledIsSet)
    {
        val[utility::conversions::to_string_t("disabled")] = ModelBase::toJson(m_Disabled);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_Object_typeIsSet)
    {
        val[utility::conversions::to_string_t("object_type")] = ModelBase::toJson(m_Object_type);
    }
    if(m_Zone_idIsSet)
    {
        val[utility::conversions::to_string_t("zone_id")] = ModelBase::toJson(m_Zone_id);
    }
    if(m_ZoneIsSet)
    {
        val[utility::conversions::to_string_t("zone")] = ModelBase::toJson(m_Zone);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_TtlIsSet)
    {
        val[utility::conversions::to_string_t("ttl")] = ModelBase::toJson(m_Ttl);
    }

    return val;
}

void SearchResultRecord::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("content")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("content"));
        if(!fieldValue.is_null())
        {
            setContent(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("disabled")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("disabled"));
        if(!fieldValue.is_null())
        {
            setDisabled(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            setName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("object_type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("object_type"));
        if(!fieldValue.is_null())
        {
            setObjectType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("zone_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("zone_id"));
        if(!fieldValue.is_null())
        {
            setZoneId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("zone")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("zone"));
        if(!fieldValue.is_null())
        {
            setZone(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            setType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ttl")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ttl"));
        if(!fieldValue.is_null())
        {
            setTtl(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void SearchResultRecord::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ContentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("content"), m_Content));
    }
    if(m_DisabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("disabled"), m_Disabled));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_Object_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("object_type"), m_Object_type));
    }
    if(m_Zone_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("zone_id"), m_Zone_id));
    }
    if(m_ZoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("zone"), m_Zone));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_TtlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ttl"), m_Ttl));
    }
}

void SearchResultRecord::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("content")))
    {
        setContent(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("content"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("disabled")))
    {
        setDisabled(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("disabled"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("object_type")))
    {
        setObjectType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("object_type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("zone_id")))
    {
        setZoneId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("zone_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("zone")))
    {
        setZone(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("zone"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ttl")))
    {
        setTtl(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ttl"))));
    }
}

utility::string_t SearchResultRecord::getContent() const
{
    return m_Content;
}

void SearchResultRecord::setContent(const utility::string_t& value)
{
    m_Content = value;
    m_ContentIsSet = true;
}

bool SearchResultRecord::contentIsSet() const
{
    return m_ContentIsSet;
}

void SearchResultRecord::unsetContent()
{
    m_ContentIsSet = false;
}

bool SearchResultRecord::isDisabled() const
{
    return m_Disabled;
}

void SearchResultRecord::setDisabled(bool value)
{
    m_Disabled = value;
    m_DisabledIsSet = true;
}

bool SearchResultRecord::disabledIsSet() const
{
    return m_DisabledIsSet;
}

void SearchResultRecord::unsetDisabled()
{
    m_DisabledIsSet = false;
}

utility::string_t SearchResultRecord::getName() const
{
    return m_Name;
}

void SearchResultRecord::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool SearchResultRecord::nameIsSet() const
{
    return m_NameIsSet;
}

void SearchResultRecord::unsetName()
{
    m_NameIsSet = false;
}

utility::string_t SearchResultRecord::getObjectType() const
{
    return m_Object_type;
}

void SearchResultRecord::setObjectType(const utility::string_t& value)
{
    m_Object_type = value;
    m_Object_typeIsSet = true;
}

bool SearchResultRecord::objectTypeIsSet() const
{
    return m_Object_typeIsSet;
}

void SearchResultRecord::unsetObject_type()
{
    m_Object_typeIsSet = false;
}

utility::string_t SearchResultRecord::getZoneId() const
{
    return m_Zone_id;
}

void SearchResultRecord::setZoneId(const utility::string_t& value)
{
    m_Zone_id = value;
    m_Zone_idIsSet = true;
}

bool SearchResultRecord::zoneIdIsSet() const
{
    return m_Zone_idIsSet;
}

void SearchResultRecord::unsetZone_id()
{
    m_Zone_idIsSet = false;
}

utility::string_t SearchResultRecord::getZone() const
{
    return m_Zone;
}

void SearchResultRecord::setZone(const utility::string_t& value)
{
    m_Zone = value;
    m_ZoneIsSet = true;
}

bool SearchResultRecord::zoneIsSet() const
{
    return m_ZoneIsSet;
}

void SearchResultRecord::unsetZone()
{
    m_ZoneIsSet = false;
}

utility::string_t SearchResultRecord::getType() const
{
    return m_Type;
}

void SearchResultRecord::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool SearchResultRecord::typeIsSet() const
{
    return m_TypeIsSet;
}

void SearchResultRecord::unsetType()
{
    m_TypeIsSet = false;
}

int32_t SearchResultRecord::getTtl() const
{
    return m_Ttl;
}

void SearchResultRecord::setTtl(int32_t value)
{
    m_Ttl = value;
    m_TtlIsSet = true;
}

bool SearchResultRecord::ttlIsSet() const
{
    return m_TtlIsSet;
}

void SearchResultRecord::unsetTtl()
{
    m_TtlIsSet = false;
}

}
}
}
}


