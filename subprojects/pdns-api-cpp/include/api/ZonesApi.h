/**
 * PowerDNS Authoritative HTTP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.13
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ZonesApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_ZonesApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_ZonesApi_H_


#include "../ApiClient.h"

#include "Zone.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  ZonesApi 
{
public:

    explicit ZonesApi( std::shared_ptr<ApiClient> apiClient );

    virtual ~ZonesApi();

    /// <summary>
    /// Returns the zone in AXFR format.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="serverId">The id of the server to retrieve</param>
    /// <param name="zoneId">The id of the zone to retrieve</param>
    pplx::task<utility::string_t> axfrExportZone(
        utility::string_t serverId,
        utility::string_t zoneId
    );
    /// <summary>
    /// Retrieve slave zone from its master.
    /// </summary>
    /// <remarks>
    /// Fails when zone kind is not Slave, or slave is disabled in the configuration. Clients MUST NOT send a body.
    /// </remarks>
    /// <param name="serverId">The id of the server to retrieve</param>
    /// <param name="zoneId">The id of the zone to retrieve</param>
    pplx::task<void> axfrRetrieveZone(
        utility::string_t serverId,
        utility::string_t zoneId
    );
    /// <summary>
    /// Verify zone contents/configuration.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="serverId">The id of the server to retrieve</param>
    /// <param name="zoneId">The id of the zone to retrieve</param>
    pplx::task<utility::string_t> checkZone(
        utility::string_t serverId,
        utility::string_t zoneId
    );
    /// <summary>
    /// Creates a new domain, returns the Zone on creation.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="serverId">The id of the server to retrieve</param>
    /// <param name="zone">The zone struct to patch with</param>
    /// <param name="rrsets">“true” (default) or “false”, whether to include the “rrsets” in the response Zone object. (optional, default to false)</param>
    pplx::task<std::shared_ptr<Zone>> createZone(
        utility::string_t serverId,
        std::shared_ptr<Zone> zone,
        boost::optional<bool> rrsets
    );
    /// <summary>
    /// Deletes this zone, all attached metadata and rrsets.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="serverId">The id of the server to retrieve</param>
    /// <param name="zoneId">The id of the zone to retrieve</param>
    pplx::task<void> deleteZone(
        utility::string_t serverId,
        utility::string_t zoneId
    );
    /// <summary>
    /// zone managed by a server
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="serverId">The id of the server to retrieve</param>
    /// <param name="zoneId">The id of the zone to retrieve</param>
    pplx::task<std::shared_ptr<Zone>> listZone(
        utility::string_t serverId,
        utility::string_t zoneId
    );
    /// <summary>
    /// List all Zones in a server
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="serverId">The id of the server to retrieve</param>
    /// <param name="zone">When set to the name of a zone, only this zone is returned. If no zone with that name exists, the response is an empty array. This can e.g. be used to check if a zone exists in the database without having to guess/encode the zone&#39;s id or to check if a zone exists.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Zone>>> listZones(
        utility::string_t serverId,
        boost::optional<utility::string_t> zone
    );
    /// <summary>
    /// Send a DNS NOTIFY to all slaves.
    /// </summary>
    /// <remarks>
    /// Fails when zone kind is not Master or Slave, or master and slave are disabled in the configuration. Only works for Slave if renotify is on. Clients MUST NOT send a body.
    /// </remarks>
    /// <param name="serverId">The id of the server to retrieve</param>
    /// <param name="zoneId">The id of the zone to retrieve</param>
    pplx::task<void> notifyZone(
        utility::string_t serverId,
        utility::string_t zoneId
    );
    /// <summary>
    /// Creates/modifies/deletes RRsets present in the payload and their comments. Returns 204 No Content on success.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="serverId">The id of the server to retrieve</param>
    /// <param name="zoneId"></param>
    /// <param name="zone">The zone struct to patch with</param>
    pplx::task<void> patchZone(
        utility::string_t serverId,
        utility::string_t zoneId,
        std::shared_ptr<Zone> zone
    );
    /// <summary>
    /// Modifies basic zone data (metadata).
    /// </summary>
    /// <remarks>
    /// Allowed fields in client body: all except id, url and name. Returns 204 No Content on success.
    /// </remarks>
    /// <param name="serverId">The id of the server to retrieve</param>
    /// <param name="zoneId"></param>
    /// <param name="zone">The zone struct to patch with</param>
    pplx::task<void> putZone(
        utility::string_t serverId,
        utility::string_t zoneId,
        std::shared_ptr<Zone> zone
    );
    /// <summary>
    /// Rectify the zone data.
    /// </summary>
    /// <remarks>
    /// This does not take into account the API-RECTIFY metadata. Fails on slave zones and zones that do not have DNSSEC.
    /// </remarks>
    /// <param name="serverId">The id of the server to retrieve</param>
    /// <param name="zoneId">The id of the zone to retrieve</param>
    pplx::task<utility::string_t> rectifyZone(
        utility::string_t serverId,
        utility::string_t zoneId
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_ZonesApi_H_ */

